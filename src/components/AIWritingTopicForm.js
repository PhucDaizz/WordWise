import React, { useState, useEffect } from 'react';
import { toast } from 'react-toastify';
import { useAuth } from '../contexts/AuthContext';
import { useFlashcard } from '../contexts/FlashcardContext';
import { useWritingExercise } from '../contexts/WritingExerciseContext';
import ApiKeyForm from './ApiKeyForm';
import LanguageSelector from './LanguageSelector';
import Spinner from './common/Spinner';
import '../css/components/WritingExercises.css';

function AIWritingTopicForm({ onSuccess, onCancel }) {
  const [learningLanguage, setLearningLanguage] = useState('ENG');
  const [nativeLanguage, setNativeLanguage] = useState('VIE');
  const [isGenerating, setIsGenerating] = useState(false);
  const [showApiKeyForm, setShowApiKeyForm] = useState(false);
  const [learningLanguageError, setLearningLanguageError] = useState('');
  const [nativeLanguageError, setNativeLanguageError] = useState('');
  
  const { getUserApiKey } = useFlashcard();
  const { autoGenerateWritingExercise } = useWritingExercise();
  const { isAuthenticated } = useAuth();
  
  // Handle form validation
  const validateForm = () => {
    let isValid = true;
    
    // Reset errors
    setLearningLanguageError('');
    setNativeLanguageError('');
    
    // Validate learning language
    if (!learningLanguage) {
      setLearningLanguageError('Vui l√≤ng ch·ªçn ng√¥n ng·ªØ h·ªçc');
      isValid = false;
    }
    
    // Validate native language
    if (!nativeLanguage) {
      setNativeLanguageError('Vui l√≤ng ch·ªçn ng√¥n ng·ªØ m·∫π ƒë·∫ª');
      isValid = false;
    }
    
    // Validate languages are different
    if (learningLanguage && nativeLanguage && learningLanguage === nativeLanguage) {
      setLearningLanguageError('Ng√¥n ng·ªØ h·ªçc v√† ng√¥n ng·ªØ m·∫π ƒë·∫ª kh√¥ng ƒë∆∞·ª£c gi·ªëng nhau');
      setNativeLanguageError('Ng√¥n ng·ªØ h·ªçc v√† ng√¥n ng·ªØ m·∫π ƒë·∫ª kh√¥ng ƒë∆∞·ª£c gi·ªëng nhau');
      isValid = false;
    }
    
    return isValid;
  };
  
  // Handle API key form success
  const handleApiKeySuccess = () => {
    setShowApiKeyForm(false);
    toast.success('API key ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!');
    // Continue with AI generation
    generateTopicWithAI();
  };
  
  // Skip API key for now
  const handleSkipApiKey = () => {
    setShowApiKeyForm(false);
    toast.info('B·∫°n c√≥ th·ªÉ th√™m API key sau trong ph·∫ßn c√†i ƒë·∫∑t. C√°c t√≠nh nƒÉng AI s·∫Ω kh√¥ng ho·∫°t ƒë·ªông n·∫øu kh√¥ng c√≥ API key.');
  };
  
  // Generate topic with AI
  const generateTopicWithAI = async () => {
    // Add additional validation if needed
    if (!validateForm()) return;
    
    setIsGenerating(true);
    toast.info('ü§ñ ƒêang t·∫°o ch·ªß ƒë·ªÅ b√†i vi·∫øt...');
    
    try {
      const result = await autoGenerateWritingExercise(learningLanguage, nativeLanguage);
      
      toast.success('‚ú® ƒê√£ t·∫°o ch·ªß ƒë·ªÅ b√†i vi·∫øt th√†nh c√¥ng!');
      console.log('Generated writing exercise:', result);
      
      // Call the onSuccess callback with the result
      if (onSuccess && typeof onSuccess === 'function') {
        onSuccess(result);
      }
    } catch (error) {
      console.error('Error generating writing topic:', error);
      // Most error handling is done in the context
    } finally {
      setIsGenerating(false);
    }
  };
  
  // Check for API key and generate topic
  const handleGenerateTopic = async () => {
    if (!isAuthenticated) {
      toast.error('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.');
      return;
    }
    
    if (!validateForm()) return;
    
    try {
      // Check for API key in localStorage first
      const localApiKey = localStorage.getItem('gemini_api_key');
      const timestamp = localStorage.getItem('gemini_api_key_timestamp');
      
      if (localApiKey && timestamp) {
        // Check if API key is still valid (2 hours)
        const now = Date.now();
        const saved = parseInt(timestamp, 10);
        const twoHoursMs = 2 * 60 * 60 * 1000;
        
        if (now - saved <= twoHoursMs) {
          // Use existing API key
          generateTopicWithAI();
          return;
        } else {
          // API key expired, remove from localStorage
          localStorage.removeItem('gemini_api_key');
          localStorage.removeItem('gemini_api_key_timestamp');
        }
      }
      
      // Check if API key is set on the server
      const key = await getUserApiKey();
      if (!key) {
        setShowApiKeyForm(true);
        toast.warn('T√≠nh nƒÉng AI y√™u c·∫ßu API key Gemini.');
        return;
      }
      
      // API key exists, proceed with generation
      generateTopicWithAI();
    } catch (error) {
      console.error('Error checking API key:', error);
      // In case of error checking API key, try to generate anyway
      generateTopicWithAI();
    }
  };
  
  // Get language name based on code
  const getLanguageName = (code) => {
    switch (code) {
      case 'ENG':
        return 'Ti·∫øng Anh';
      case 'VIE':
        return 'Ti·∫øng Vi·ªát';
      case 'JPN':
        return 'Ti·∫øng Nh·∫≠t';
      case 'KOR':
        return 'Ti·∫øng H√†n';
      case 'CHI':
        return 'Ti·∫øng Trung';
      case 'FRA':
        return 'Ti·∫øng Ph√°p';
      case 'GER':
        return 'Ti·∫øng ƒê·ª©c';
      case 'SPA':
        return 'Ti·∫øng T√¢y Ban Nha';
      default:
        return code;
    }
  };
  
  return (
    <div className="card ai-writing-topic-form mb-4">
      <div className="card-header">
        <h5 className="card-title">
          <i className="fas fa-robot me-2"></i>
          T·∫°o ƒë·ªÅ b√†i vi·∫øt b·∫±ng AI
        </h5>
      </div>
      <div className="card-body">
        <div className="info-card mb-3" style={{ 
          background: 'rgba(66, 133, 244, 0.08)',
          padding: '16px',
          borderRadius: '8px',
          borderLeft: '4px solid #4285f4'
        }}>
          <h6 style={{ 
            color: '#1e293b', 
            fontSize: '16px', 
            marginBottom: '6px',
            fontWeight: '600'
          }}>
            <i className="fas fa-info-circle me-2"></i> 
            C√°ch th·ª©c ho·∫°t ƒë·ªông
          </h6>
          <p style={{ color: '#475569', fontSize: '14px', margin: 0 }}>
            AI s·∫Ω t·ª± ƒë·ªông t·∫°o ra m·ªôt ch·ªß ƒë·ªÅ b√†i t·∫≠p vi·∫øt d·ª±a tr√™n ng√¥n ng·ªØ b·∫°n ƒëang h·ªçc v√† ng√¥n ng·ªØ m·∫π ƒë·∫ª c·ªßa b·∫°n.
            T√≠nh nƒÉng n√†y y√™u c·∫ßu b·∫°n ƒë√£ l∆∞u tr·ªØ kh√≥a API Gemini.
          </p>
        </div>
        
        <form>
          <div className="mb-3">
            <label htmlFor="learningLanguage" className="form-label">Ng√¥n ng·ªØ h·ªçc</label>
            <LanguageSelector
              id="learningLanguage"
              value={learningLanguage}
              onChange={(e) => setLearningLanguage(e.target.value)}
              className={`form-select ${learningLanguageError ? 'is-invalid' : ''}`}
            />
            {learningLanguageError && (
              <div className="invalid-feedback">{learningLanguageError}</div>
            )}
          </div>
          
          <div className="mb-3">
            <label htmlFor="nativeLanguage" className="form-label">Ng√¥n ng·ªØ m·∫π ƒë·∫ª</label>
            <LanguageSelector
              id="nativeLanguage"
              value={nativeLanguage}
              onChange={(e) => setNativeLanguage(e.target.value)}
              className={`form-select ${nativeLanguageError ? 'is-invalid' : ''}`}
            />
            {nativeLanguageError && (
              <div className="invalid-feedback">{nativeLanguageError}</div>
            )}
          </div>
          
          <div className="d-flex justify-content-end mt-4">
            <button 
              type="button" 
              className="btn btn-outline-secondary me-2"
              onClick={onCancel}
              disabled={isGenerating}
            >
              H·ªßy
            </button>
            <button
              type="button"
              className="btn btn-primary"
              onClick={handleGenerateTopic}
              disabled={isGenerating}
            >
              {isGenerating ? (
                <>
                  <Spinner size="sm" className="me-2" />
                  ƒêang t·∫°o...
                </>
              ) : (
                <>
                  <i className="fas fa-magic me-2"></i>
                  T·∫°o ƒë·ªÅ b√†i
                </>
              )}
            </button>
          </div>
        </form>
      </div>
      
      {/* API Key form modal */}
      {showApiKeyForm && (
        <div className="modal-overlay">
          <div className="gemini-key-form-container">
            <ApiKeyForm 
              onSuccess={handleApiKeySuccess} 
              onSkip={handleSkipApiKey}
            />
          </div>
        </div>
      )}
    </div>
  );
}

export default AIWritingTopicForm; 